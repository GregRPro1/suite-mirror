
import argparse, json, os
from pathlib import Path
from datetime import datetime

def emit_profile(name: str, primary: str, secondary: str, out_dir: Path):
    out_dir.mkdir(parents=True, exist_ok=True)
    data = {
        'name': name,
        'created': datetime.utcnow().isoformat()+'Z',
        'theme': {'primary': primary, 'secondary': secondary}
    }
    path = out_dir / f'{name}.yaml'
    # minimal YAML without dependency: write key: value manually
    with open(path, 'w', encoding='utf-8') as f:
        f.write(f"name: {data['name']}\n")
        f.write(f"created: {data['created']}\n")
        f.write("theme:\n")
        f.write(f"  primary: {primary}\n")
        f.write(f"  secondary: {secondary}\n")
    return path

def emit_qss(name: str, primary: str, secondary: str, out_dir: Path):
    out_dir.mkdir(parents=True, exist_ok=True)
    qss = f"""/* {name} autogenerated theme */
QWidget {{ background: {secondary}; }}
QPushButton {{ background: {primary}; }}
"""
    path = out_dir / f"{name}.qss"
    path.write_text(qss, encoding='utf-8')
    return path

def main(argv=None):
    p = argparse.ArgumentParser(prog='configurator')
    p.add_argument('--name', required=True)
    p.add_argument('--primary', default='#2d6cdf')
    p.add_argument('--secondary', default='#f0f2f5')
    p.add_argument('--profiles-dir', default='profiles')
    p.add_argument('--qss-dir', default='ui/qss')
    args = p.parse_args(argv)

    prof = emit_profile(args.name, args.primary, args.secondary, Path(args.profiles_dir))
    qss = emit_qss(args.name, args.primary, args.secondary, Path(args.qss_dir))

    print(str(prof))
    print(str(qss))
    return 0

if __name__ == '__main__':
    raise SystemExit(main())
